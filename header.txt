set(UI_FILES
    ui/mainwindow.ui
)

set(GENERATED_FILES
    ${CMAKE_CURRENT_BINARY_DIR}/include/ui_mainwindow.h
)

# Find the path to the uic tool
find_program(UIC_EXECUTABLE uic HINTS ${QT_BIN_DIR})

# Run the uic tool to generate ui_mainwindow.h
qt6_wrap_ui(GENERATED_FILES ${UI_FILES} OPTIONS "-o ${CMAKE_CURRENT_BINARY_DIR}/src/ui_mainwindow.h" COMMAND ${UIC_EXECUTABLE})





namespace yahoo {

    namespace stockprice {
        extern const std::unordered_map<std::string, int> columnNameToValue;

        inline int index(const std::string& columnName);

        std::string GetHistoricalPrices(
            std::string symbol,
            std::time_t period1,
            std::time_t period2,
            std::string interval
        );

        void downloadCSV(std::string symbol,
            std::time_t period1,
            std::time_t period2,
            std::string interval
        );

        std::vector<long double> getCol(std::string symbol,
            std::time_t period1,
            std::time_t period2,
            std::string interval,
            std::string colName
        );

        inline std::vector<long double> readCol(const std::string& filePath, const std::string& colName);
    }

    namespace options {
        extern const std::unordered_map<std::string, int> optionCols;

        inline int index(const std::string& columnName);

        inline std::vector<long double> readCol(const std::string& filePath, const std::string& colName);

        std::string GetJSON(const std::string& symbol, const std::string& date);

        void parseOptions(const std::string& jsonResponse);

        void parseBuffer(std::string& responseBuffer);

        std::pair<std::string, std::string> splitBuffer(std::string& responseBuffer);

        void printObj(nlohmann::json& optionsJSON, std::ofstream& csvFile);

        void JSONtoCSV(nlohmann::json& data, const std::string& filePath);

        void downloadCSV(const std::string& ticker, const std::string& date);
    }

}